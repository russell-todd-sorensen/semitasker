# script to read data in binary mode and count
# chars on each "line".
try {
    set dir [file dirname [info script]]
    set in "UTF-8-test.txt"
    set filename [file join $dir $in]
    if {![file exists $filename]} {
        puts stdout "file '$filename' does not exist, exiting."
        return -code error
    }

    set lineNumber 0

    set inFd  [open $filename [list RDONLY]]

    # different configs
    set configId 3
    # print starting config:
    puts stdout "[chan configure $inFd]";

    switch -exact -- $configId {
        1 {
            set maxLines 1000
            set options [list -translation binary]
            chan configure $inFd {*}$options
            set outFileTemplate "%0.4d-utf-test-line.xml"
            set xmlStartTemplate {<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet href="utf-test-line.css" type="text/css" ?>
<test id="line-number-%0.4d" xml:space="preserve" xmlns="https://home.highfivediet.com/roman">}
            set xmlEnd {</test>}
            while {($lineNumber < $maxLines) && ![eof $inFd]  && [set len [gets $inFd lineValue]] > -1} {
                set charLength [string length "$lineValue"]
                set byteLength [string bytelength "$lineValue"]
                set diff [expr {$byteLength - $charLength}]
                set outFd [open [format $outFileTemplate $lineNumber] [list WRONLY APPEND CREAT TRUNC]]
                chan configure $outFd {*}$options
                puts $outFd [format $xmlStartTemplate $lineNumber]
                puts $outFd "<stats>"
                puts $outFd "<line>[format "|%4s %5s %5s %4s" Line Bytes Chars Diff]</line>"
                puts $outFd "<line>[format "|L%3.3d %5d %5d %4d" $lineNumber $byteLength $charLength $diff]</line>"
                puts $outFd "</stats>"
                puts $outFd "<line>|[string repeat "-" 78]|</line>"
                puts $outFd "<line>|$lineValue</line>"
                puts $outFd $xmlEnd
                close $outFd
                incr lineNumber

            }
        }
        3 {
            set startLine 62
            set maxLines 1000
            set options [list -translation binary]
            #set options [list -translation auto]
            chan configure $inFd {*}$options
            puts stdout [chan configure $inFd]
            set outFileXMLTemplate "%0.4d-xml-test-line.xml"
            set outFileRawTemplate "%0.4d-raw-data-line.txt"
            set outFileHexTemplate "%0.4d-hex-dump-line.txt"
            set outFileUtfCheckTemplate "%0.4d-utfcheck.txt"
            set xmlStartTemplate {<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet href="utf-test-line.css" type="text/css" ?>
<test id="line-number-%0.4d" xml:space="preserve" xmlns="https://home.highfivediet.com/roman">}
            set xmlEnd {</test>}
            while {($lineNumber < [expr {$startLine + $maxLines}]) && ![eof $inFd]  && [set len [gets $inFd lineValue]] > -1} {
                if {$lineNumber < $startLine}  {
                    incr lineNumber
                    continue
                }
                set charLength [string length "$lineValue"]
                set byteLength [string bytelength "$lineValue"]
                set diff [expr {$byteLength - $charLength}]
                set outFdXML [open [format $outFileXMLTemplate $lineNumber] [list WRONLY APPEND CREAT TRUNC BINARY]]
                chan configure $outFdXML {*}$options
                puts $outFdXML [format $xmlStartTemplate $lineNumber]
                puts $outFdXML "<stats>"
                puts $outFdXML "<line>[format "|%4s %5s %5s %4s" Line Bytes Chars Diff]</line>"
                puts $outFdXML "<line>[format "|L%3.3d %5d %5d %4d" $lineNumber $byteLength $charLength $diff]</line>"
                puts $outFdXML "</stats>"
                puts $outFdXML "<line>|[string repeat "-" 78]|</line>"
                puts $outFdXML "<line>|$lineValue</line>"
                puts $outFdXML $xmlEnd
                close $outFdXML
                set outFilenameRaw [format $outFileRawTemplate $lineNumber]
                set outFdRaw [open $outFilenameRaw [list WRONLY APPEND CREAT TRUNC BINARY]]
                chan configure $outFdRaw {*}$options
                puts -nonewline $outFdRaw $lineValue
                close $outFdRaw
                set outFilenameUtfCheck [format $outFileUtfCheckTemplate $lineNumber]
                set outFdUtfCheck [open  $outFilenameUtfCheck [list WRONLY APPEND CREAT TRUNC BINARY]]
                exec utfcheck << $lineValue >&@ $outFdUtfCheck
                close $outFdUtfCheck
                set outFilenameHex [format $outFileHexTemplate $lineNumber]
                exec hd -v < $outFilenameRaw > $outFilenameHex
                incr lineNumber
            }
        }
        2 {

        }
        0 - default {
            # no config, print config
            puts stdout "[chan configure $inFd]";
            set maxLines 1000
        }
    }

    close $inFd
} on error {msg dict} {
    global errorInfo
    puts stdout "Error $errorInfo"
    puts stdout "Error $msg [dict get $dict]"
    try {
        set chansToClose [list]
        
        foreach chanName [chan names file*] {
            close $chanName
        }
    } on error {result options} {
        return -options $options $result
    }
}