
    It seems like a simple stack concept will work here.
    Count characters until you reach \n, push this number,
    and maybe the string as a list into position 1
    max = 0
    s[0] = (0,'')
    d i r \n --> s[1] = (3,'dir')
    the \t pulls 3 off (advances the index to 2)
    s u b d i r 1 \n --> s[2] = (7,'subdir1')
    \t leaves s[1] as is \t leaves s[2] as is
    f i l e 1 . [Notice we have file] e x t \n --> s[3] = (8,'file1.ext') store max =Max(max,3+7+8+2) = 20 (two / to join the 3 components)
    \t leaves s[1] \t leaves s[2]
    s u b s u b d i r 1 \n -> s[3] = (10,'subsubdir1')
    \t leaves s[1]
    s u b d i r 2 \n --> s[2] = (7,'subdir2')
    \t leaves s[1] \t leaves s[2]
    s u b s u b d i r 2 \n -> s[3] = (10,'subsubdir2')
    \t leaves s[1] \t leaves s[2] \t leaves s[3]
    f i l e 2 . [Notice we have a file] e x t \n --> s[4] = (9,'file2.ext') store max = Max(20,3+7+10+9+3) = 32

    return max


code-2.tcl adds the ability to add tabs to
the filesystem, so you can actually submit
substantially different filesystems.

The short javascript function addTab may be the
most interesting part of this solution, as
the web had a number of very long solutions to
adding a tab to a textarea.