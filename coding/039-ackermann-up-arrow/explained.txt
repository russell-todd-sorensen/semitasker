 Describe solution here:
     # The function requires a recursive procedure
    # Since Tcl is now stackless, this should work ok in tcl.
    #include <stdio.h>

    The Final solution calculates Ack(4,2), Ack(4,3) .... symbolically.
    See output for fn(4,10) below.

    The following solution almost does away with the recursion,
    the software cannot calculate fn(4,2) == 2^(65533+3) -3
    There is another limit for fn(3,*)
    fn(3,1020) = 2^(1020+3)-3 = 89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068605
    fn(4,2) is done in because fn(4,2) = fn(3,65533) == (2^(65533+3) - 3) (as above) 

    All of these can be calculated with at most one recursive entry from fn(4,*) to fn(3,*), 
    which can be calculated exactly, and actually you could extend this to infinity almost
    because fn(4,n) first calls fn(4,n-1), then fn(4,n-2)...

    Beyond this, if you start at fn(5,x) or fn(6,x) eventually recurse to fn(4,65533), Which requires a stack at 
    least 66k.


    Each of f(1,x), f(2,x), f(3,x) reduce to non-recursive O(1) time and space.

::ackermann::fn(4,10) =

m = '4'
n = '10'
maxRecursions = '500000'
COUNTER = '22'
::ackermann::fn(4,10) = 2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} 0} -3
logs = 
B=0000001 ack(4,10)
B=0000002 ack(4,9)
B=0000003 ack(4,8)
B=0000004 ack(4,7)
B=0000005 ack(4,6)
B=0000006 ack(4,5)
B=0000007 ack(4,4)
B=0000008 ack(4,3)
B=0000009 ack(4,2)
B=0000010 ack(4,1)
B=0000011 ack(4,0)
B=0000012 ack(3,1)
E=0000012 ack(3,1)=13+
E=0000012 ack(4,0)=13+
B=0000013 ack(3,13)
E=0000013 ack(3,13)=65533+
E=0000013 ack(4,1)=65533
B=0000014 ack(3,65533)
E=0000014 ack(3,65533)=2^ 65536 -3+
E=0000014 ack(4,2)=2^ 65536 -3
B=0000015 ack(3,2^ 65536 -3)
E=0000015 ack(3,2^ 65536 -3)=2^ {2^ 65536 0} -3+
E=0000015 ack(4,3)=2^ {2^ 65536 0} -3
B=0000016 ack(3,2^ {2^ 65536 0} -3)
E=0000016 ack(3,2^ {2^ 65536 0} -3)=2^ {2^ {2^ 65536 0} 0} -3+
E=0000016 ack(4,4)=2^ {2^ {2^ 65536 0} 0} -3
B=0000017 ack(3,2^ {2^ {2^ 65536 0} 0} -3)
E=0000017 ack(3,2^ {2^ {2^ 65536 0} 0} -3)=2^ {2^ {2^ {2^ 65536 0} 0} 0} -3+
E=0000017 ack(4,5)=2^ {2^ {2^ {2^ 65536 0} 0} 0} -3
B=0000018 ack(3,2^ {2^ {2^ {2^ 65536 0} 0} 0} -3)
E=0000018 ack(3,2^ {2^ {2^ {2^ 65536 0} 0} 0} -3)=2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3+
E=0000018 ack(4,6)=2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3
B=0000019 ack(3,2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3)
E=0000019 ack(3,2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3)=2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3+
E=0000019 ack(4,7)=2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3
B=0000020 ack(3,2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3)
E=0000020 ack(3,2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3)=2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3+
E=0000020 ack(4,8)=2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3
B=0000021 ack(3,2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3)
E=0000021 ack(3,2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3)=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3+
E=0000021 ack(4,9)=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3
B=0000022 ack(3,2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3)
E=0000022 ack(3,2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3)=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} 0} -3+
E=0000022 ack(4,10)=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} 0} -3

cache size = 22

----- CACHE -------  

3,1 = 1 value=13 MEANS fn(3,1) was added to cache, but never used (=1), value of fn(3,1)=13
This means that the cache value is never used, all values calculated are listed below.

{2^ 65536 0} == {2^65536}, the trailing -3 subtracts from the expanded integer value,
 but on the next value 3 is added to the exponent, leaving zero. So the 0 is just a reminder
 that this is the result of (-3+3).

3,1 = 1 value=13
3,13 = 1 value=65533
3,2^ 65536 -3 = 1 value=2^ {2^ 65536 0} -3
3,2^ {2^ 65536 0} -3 = 1 value=2^ {2^ {2^ 65536 0} 0} -3
3,2^ {2^ {2^ 65536 0} 0} -3 = 1 value=2^ {2^ {2^ {2^ 65536 0} 0} 0} -3
3,2^ {2^ {2^ {2^ 65536 0} 0} 0} -3 = 1 value=2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3
3,2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3 = 1 value=2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3
3,2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3 = 1 value=2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3
3,2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3 = 1 value=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3
3,2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3 = 1 value=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} 0} -3
3,65533 = 1 value=2^ 65536 -3
4,0  = 1 value=13
4,1  = 1 value=65533
4,2  = 1 value=2^ 65536 -3
4,3  = 1 value=2^ {2^ 65536 0} -3
4,4  = 1 value=2^ {2^ {2^ 65536 0} 0} -3
4,5  = 1 value=2^ {2^ {2^ {2^ 65536 0} 0} 0} -3
4,6  = 1 value=2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} -3
4,7  = 1 value=2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} -3
4,8  = 1 value=2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} -3
4,9  = 1 value=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} -3
4,10 = 1 value=2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ {2^ 65536 0} 0} 0} 0} 0} 0} 0} 0} -3

